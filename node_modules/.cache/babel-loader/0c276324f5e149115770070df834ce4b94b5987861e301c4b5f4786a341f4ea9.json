{"ast":null,"code":"import _toConsumableArray from \"G:/Route/Etihad/Final/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isDisabled, isVisible, parseSelector } from '../util/index.js';\nvar getSelector = function getSelector(element) {\n  var selector = element.getAttribute('data-bs-target');\n  if (!selector || selector === '#') {\n    var hrefAttribute = element.getAttribute('href');\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {\n      return null;\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = \"#\".concat(hrefAttribute.split('#')[1]);\n    }\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;\n  }\n  return parseSelector(selector);\n};\nvar SelectorEngine = {\n  find: function find(selector) {\n    var _ref;\n    var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n    return (_ref = []).concat.apply(_ref, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));\n  },\n  findOne: function findOne(selector) {\n    var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n    return Element.prototype.querySelector.call(element, selector);\n  },\n  children: function children(element, selector) {\n    var _ref2;\n    return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(element.children)).filter(function (child) {\n      return child.matches(selector);\n    });\n  },\n  parents: function parents(element, selector) {\n    var parents = [];\n    var ancestor = element.parentNode.closest(selector);\n    while (ancestor) {\n      parents.push(ancestor);\n      ancestor = ancestor.parentNode.closest(selector);\n    }\n    return parents;\n  },\n  prev: function prev(element, selector) {\n    var previous = element.previousElementSibling;\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous];\n      }\n      previous = previous.previousElementSibling;\n    }\n    return [];\n  },\n  // TODO: this is now unused; remove later along with prev()\n  next: function next(element, selector) {\n    var next = element.nextElementSibling;\n    while (next) {\n      if (next.matches(selector)) {\n        return [next];\n      }\n      next = next.nextElementSibling;\n    }\n    return [];\n  },\n  focusableChildren: function focusableChildren(element) {\n    var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(function (selector) {\n      return \"\".concat(selector, \":not([tabindex^=\\\"-\\\"])\");\n    }).join(',');\n    return this.find(focusables, element).filter(function (el) {\n      return !isDisabled(el) && isVisible(el);\n    });\n  },\n  getSelectorFromElement: function getSelectorFromElement(element) {\n    var selector = getSelector(element);\n    if (selector) {\n      return SelectorEngine.findOne(selector) ? selector : null;\n    }\n    return null;\n  },\n  getElementFromSelector: function getElementFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? SelectorEngine.findOne(selector) : null;\n  },\n  getMultipleElementsFromSelector: function getMultipleElementsFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? SelectorEngine.find(selector) : [];\n  }\n};\nexport default SelectorEngine;","map":{"version":3,"names":["isDisabled","isVisible","parseSelector","getSelector","element","selector","getAttribute","hrefAttribute","includes","startsWith","concat","split","trim","SelectorEngine","find","_ref","arguments","length","undefined","document","documentElement","apply","_toConsumableArray","Element","prototype","querySelectorAll","call","findOne","querySelector","children","_ref2","filter","child","matches","parents","ancestor","parentNode","closest","push","prev","previous","previousElementSibling","next","nextElementSibling","focusableChildren","focusables","map","join","el","getSelectorFromElement","getElementFromSelector","getMultipleElementsFromSelector"],"sources":["G:/Route/Etihad/Final/node_modules/bootstrap/js/src/dom/selector-engine.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isDisabled, isVisible, parseSelector } from '../util/index.js'\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttribute = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttribute || (!hrefAttribute.includes('#') && !hrefAttribute.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = `#${hrefAttribute.split('#')[1]}`\n    }\n\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null\n  }\n\n  return parseSelector(selector)\n}\n\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector))\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector)\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector))\n  },\n\n  parents(element, selector) {\n    const parents = []\n    let ancestor = element.parentNode.closest(selector)\n\n    while (ancestor) {\n      parents.push(ancestor)\n      ancestor = ancestor.parentNode.closest(selector)\n    }\n\n    return parents\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous]\n      }\n\n      previous = previous.previousElementSibling\n    }\n\n    return []\n  },\n  // TODO: this is now unused; remove later along with prev()\n  next(element, selector) {\n    let next = element.nextElementSibling\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next]\n      }\n\n      next = next.nextElementSibling\n    }\n\n    return []\n  },\n\n  focusableChildren(element) {\n    const focusables = [\n      'a',\n      'button',\n      'input',\n      'textarea',\n      'select',\n      'details',\n      '[tabindex]',\n      '[contenteditable=\"true\"]'\n    ].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(',')\n\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))\n  },\n\n  getSelectorFromElement(element) {\n    const selector = getSelector(element)\n\n    if (selector) {\n      return SelectorEngine.findOne(selector) ? selector : null\n    }\n\n    return null\n  },\n\n  getElementFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.findOne(selector) : null\n  },\n\n  getMultipleElementsFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.find(selector) : []\n  }\n}\n\nexport default SelectorEngine\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}